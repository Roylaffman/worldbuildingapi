# Generated by Django 4.2.7 on 2025-09-21 23:45

import collab.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='World',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The name of the world', max_length=200)),
                ('description', models.TextField(help_text="Detailed description of the world's setting and theme")),
                ('is_public', models.BooleanField(default=True, help_text='Whether this world is publicly visible')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this world was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="When this world's metadata was last updated")),
                ('creator', models.ForeignKey(help_text='The user who created this world', on_delete=django.db.models.deletion.CASCADE, related_name='created_worlds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'World',
                'verbose_name_plural': 'Worlds',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text="User's bio for worldbuilding community")),
                ('preferred_content_types', models.JSONField(default=list, help_text='List of preferred content types for this user')),
                ('contribution_count', models.PositiveIntegerField(default=0, help_text='Total number of content contributions')),
                ('worlds_created', models.PositiveIntegerField(default=0, help_text='Number of worlds created by this user')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='worldbuilding_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The tag name', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('world', models.ForeignKey(help_text='The world this tag belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='collab.world')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
                'unique_together': {('name', 'world')},
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this content entry', max_length=300)),
                ('content', models.TextField(help_text='The main content/body text')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this content was created (immutable)')),
                ('genre', models.CharField(blank=True, help_text='Story genre (e.g., fantasy, sci-fi, mystery)', max_length=100)),
                ('story_type', models.CharField(choices=[('short_story', 'Short Story'), ('novella', 'Novella'), ('chapter', 'Chapter'), ('vignette', 'Vignette'), ('legend', 'Legend'), ('myth', 'Myth'), ('historical_account', 'Historical Account')], default='short_story', help_text='Type of narrative content', max_length=50)),
                ('timeline_period', models.CharField(blank=True, help_text="When in the world's timeline this story takes place", max_length=200)),
                ('setting_location', models.CharField(blank=True, help_text='Where in the world this story takes place', max_length=200)),
                ('main_characters', models.JSONField(default=list, help_text='List of main character names or references')),
                ('word_count', models.PositiveIntegerField(default=0, help_text='Approximate word count of the story')),
                ('is_canonical', models.BooleanField(default=True, help_text='Whether this story is considered canonical to the world')),
                ('author', models.ForeignKey(help_text='The user who created this content', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_authored', to=settings.AUTH_USER_MODEL)),
                ('world', models.ForeignKey(help_text='The world this content belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='collab.world')),
            ],
            options={
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
                'ordering': ['-created_at'],
            },
            bases=(collab.models.ImmutableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this content entry', max_length=300)),
                ('content', models.TextField(help_text='The main content/body text')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this content was created (immutable)')),
                ('summary', models.CharField(blank=True, help_text='Brief summary of the page content', max_length=500)),
                ('author', models.ForeignKey(help_text='The user who created this content', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_authored', to=settings.AUTH_USER_MODEL)),
                ('world', models.ForeignKey(help_text='The world this content belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='collab.world')),
            ],
            options={
                'verbose_name': 'Page',
                'verbose_name_plural': 'Pages',
                'ordering': ['-created_at'],
            },
            bases=(collab.models.ImmutableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this content entry', max_length=300)),
                ('content', models.TextField(help_text='The main content/body text')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this content was created (immutable)')),
                ('image_file', models.ImageField(help_text='The uploaded image file', upload_to='worldbuilding/images/%Y/%m/%d/')),
                ('caption', models.CharField(blank=True, help_text='Brief caption for the image', max_length=500)),
                ('alt_text', models.CharField(help_text='Alternative text for accessibility', max_length=200)),
                ('image_type', models.CharField(choices=[('concept_art', 'Concept Art'), ('map', 'Map'), ('character_portrait', 'Character Portrait'), ('location_photo', 'Location Photo'), ('item_illustration', 'Item Illustration'), ('scene_illustration', 'Scene Illustration'), ('diagram', 'Diagram'), ('other', 'Other')], default='other', help_text='Type of image content', max_length=50)),
                ('dimensions', models.CharField(blank=True, help_text='Image dimensions (automatically populated)', max_length=50)),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes (automatically populated)')),
                ('author', models.ForeignKey(help_text='The user who created this content', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_authored', to=settings.AUTH_USER_MODEL)),
                ('world', models.ForeignKey(help_text='The world this content belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='collab.world')),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
                'ordering': ['-created_at'],
            },
            bases=(collab.models.ImmutableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Essay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this content entry', max_length=300)),
                ('content', models.TextField(help_text='The main content/body text')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this content was created (immutable)')),
                ('abstract', models.TextField(blank=True, help_text="Abstract or summary of the essay's main points")),
                ('word_count', models.PositiveIntegerField(default=0, help_text='Approximate word count of the essay content')),
                ('author', models.ForeignKey(help_text='The user who created this content', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_authored', to=settings.AUTH_USER_MODEL)),
                ('world', models.ForeignKey(help_text='The world this content belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='collab.world')),
            ],
            options={
                'verbose_name': 'Essay',
                'verbose_name_plural': 'Essays',
                'ordering': ['-created_at'],
            },
            bases=(collab.models.ImmutableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of this content entry', max_length=300)),
                ('content', models.TextField(help_text='The main content/body text')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this content was created (immutable)')),
                ('full_name', models.CharField(help_text="Character's full name", max_length=200)),
                ('age', models.CharField(blank=True, help_text="Character's age (can be descriptive like 'ancient' or 'young adult')", max_length=50)),
                ('species', models.CharField(blank=True, help_text="Character's species or race", max_length=100)),
                ('occupation', models.CharField(blank=True, help_text="Character's job or role in the world", max_length=200)),
                ('location', models.CharField(blank=True, help_text='Where the character is typically found', max_length=200)),
                ('personality_traits', models.JSONField(default=list, help_text='List of personality traits')),
                ('physical_description', models.TextField(blank=True, help_text='Detailed physical description of the character')),
                ('background', models.TextField(blank=True, help_text="Character's backstory and history")),
                ('relationships', models.JSONField(default=dict, help_text='Relationships with other characters (JSON format)')),
                ('author', models.ForeignKey(help_text='The user who created this content', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_authored', to=settings.AUTH_USER_MODEL)),
                ('world', models.ForeignKey(help_text='The world this content belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_entries', to='collab.world')),
            ],
            options={
                'verbose_name': 'Character',
                'verbose_name_plural': 'Characters',
                'ordering': ['-created_at'],
            },
            bases=(collab.models.ImmutableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ContentTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_tags', to='collab.tag')),
            ],
            options={
                'verbose_name': 'Content Tag',
                'verbose_name_plural': 'Content Tags',
                'unique_together': {('content_type', 'object_id', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='ContentLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_object_id', models.PositiveIntegerField()),
                ('to_object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('from_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links_from', to='contenttypes.contenttype')),
                ('to_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links_to', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Content Link',
                'verbose_name_plural': 'Content Links',
                'unique_together': {('from_content_type', 'from_object_id', 'to_content_type', 'to_object_id')},
            },
        ),
    ]
